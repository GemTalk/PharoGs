WinPlatform yourself.
Transcript show: 'method count = '.
[
| cr lf tab block stream1 reservedSelectors list count keepGs filter1 filter2 |
cr := Character cr.
lf := Character lf.
tab := Character tab.
count := 0.
block := [:aString | aString collect: [:each | each == cr ifTrue: [lf] ifFalse: [each]]].
reservedSelectors := #(
	__inProtectedMode _and: _downTo:by:do: _downTo:do: _gsReturnNothingEnableEvents
	_gsReturnNoResult _isArray _isExceptionClass _isExecBlock _isFloat _isInteger
	_isNumber _isOneByteString _isRange _isRegexp _isRubyHash _isScaledDecimal
	_isSmallInteger _isSymbol _leaveProtectedMode _or: _stringCharSize ~~
	and: == ifFalse: ifFalse:ifTrue: ifNil: ifNil:ifNotNil: ifNotNil: ifNotNil:ifNil: ifTrue:
	ifTrue:ifFalse: isKindOf: or: timesRepeat: to:by:do: to:do: untilFalse untilFalse: untilTrue
	untilTrue: whileFalse whileFalse: whileTrue whileTrue: repeat
).
keepGs := #(	"classes known to the VM that need to use the GemStone one"
	Array ArithmeticError Behavior BlockClosure Boolean ByteArray CannotReturn 
	Character Class ClassDescription Collection Error Exception ExceptionSet 
	Float FloatingPointException Halt Integer LargeInteger Magnitude Message 
	MessageNotUnderstood Metaclass Notification Number Object Pragma 
	ProcessorScheduler ScaledDecimal SequenceableCollection SmallInteger String 
	Symbol UndefinedObject Warning ZeroDivide
).

"special handling for binary selectors in a literal array"
filter1 := [:source |	
	| i j literalArrayDepth prev readStream writeStream |
	literalArrayDepth := 0.
	readStream := ReadStream on: source.
	writeStream := WriteStream on: String new.
	[
		readStream atEnd not.
	] whileTrue: [
		| next |
		next := readStream next.
		(next == $" and: [prev ~~ $$]) ifTrue: [
			writeStream nextPut: $"; nextPutAll: (readStream upTo: $"); nextPut: $".
			prev := $".
		] ifFalse: [
		(next == $' and: [prev ~~ $$]) ifTrue: [
			writeStream nextPut: $'; nextPutAll: (readStream upTo: $'); nextPut: $'.
			prev := $'.
		] ifFalse: [
		(next == $# and: [readStream peekFor: $(]) ifTrue: [
			writeStream nextPutAll: '#('.
			prev := $(.
			literalArrayDepth := literalArrayDepth + 1.
		] ifFalse: [
		literalArrayDepth > 0 ifTrue: [
			(next == $( and: [prev ~~ $#]) ifTrue: [
				writeStream nextPut: next.
				prev := next.
				literalArrayDepth := literalArrayDepth + 1.
			] ifFalse: [
			next == $) ifTrue: [
				writeStream nextPut: next.
				prev := next.
				literalArrayDepth := literalArrayDepth - 1.
			] ifFalse: [
			(next isSpecial and: [prev ~~ $$]) ifTrue: [
				prev ~~ $# ifTrue: [
					writeStream nextPut: $#.
					prev := $#.
				].
				writeStream nextPut: next.
				prev := next.
				[
					readStream peek isSpecial.
				] whileTrue: [
					writeStream nextPut: (prev := readStream next).
				].
			] ifFalse: [
				writeStream nextPut: next.
				prev := next.
			]]]
		] ifFalse: [
			writeStream nextPut: next.
			prev := next.
		]]]]
	].
	writeStream contents.
].

"special handling for methods we know won't compile"
filter2 := [:behavior :selector :source | 
	| compileErrors flag |
	compileErrors := #(
		#(#Pragma #selector)
		#(#Pragma #selector:)
		#('SmallInteger class' #maxVal)
		#('SmallInteger class' #minVal)
		#('SmallInteger class' #startUp:)
	).
	flag := compileErrors anySatisfy: [:pair | 
		(pair first == $* or: [pair first = behavior name]) and: [pair last == selector]].
	flag ifTrue: [
		| i |
		i :=  source indexOf: lf.
		(i > 1 and: [source at: i - 1]) == $. ifTrue: [i := i - 1].
		((source copyFrom: 1 to: i - 1) copyReplaceAll: 'pointerSize' with: 'pointerSizeX'), lf asString , 
			'	<compileError>' , lf asString , '"' , 
			((source copyFrom: i to: source size) copyReplaceAll: '"' with: '""') , '"'.
	] ifFalse: [
		source
	].
].
stream1 := ('methods.gs' asFileReference writeStream)
	nextPut: (Character codePoint: 33); "bang should not be present in Pharo source"
	nextPutAll: ' - generated by methods.st'; lf;
	nextPutAll: 'errorCount'; lf;
	nextPutAll: 'output push methods.out only'; lf;
	nextPutAll: 'set compile_env: 0'; lf;
	nextPutAll: 'run'; lf;
	nextPutAll: '| symbolList |'; lf;
	nextPutAll: 'symbolList := GsSession currentSession symbolList.'; lf;
	nextPutAll: 'symbolList add: (symbolList remove: PharoPools) after: Smalltalk.'; lf;
	nextPut: $%; lf.
list := true
	ifTrue: [ProtoObject withAllSubclasses]
	ifFalse: [Array with: Object].
list do: [ :eachClass | 
	eachClass isMeta ifFalse: [ | path stream2 |

		"generate file-in for methods"
		path := 'classes/' , eachClass name , '.gs'.
		stream1 
			nextPutAll: 'input '; nextPutAll: path; lf.
		stream2 := (path asFileReference writeStream) 
			nextPutAll: 'output push output/';
			nextPutAll: eachClass name;
			nextPutAll: '.out only'; lf;
			nextPutAll: 'errorCount'; lf;
			nextPutAll: 'set compile_env: 0'; lf;
			nextPutAll: 'run'; lf;
			nextPutAll: 'Smalltalk at: #'; nextPutAll: eachClass name; lf;
			nextPut: $%; lf;
			nextPutAll: 'set class **'; lf;
			yourself.
		"for GemStone classes, add a class-side #'pharoComment' method"
		(keepGs includes: eachClass name) ifTrue: [
			stream2
				nextPutAll: 'set compile_env: 2'; lf;
				nextPutAll: 'category: ''GemStone'''; lf;
				nextPutAll: 'classMethod:'; lf;
				nextPutAll: 'pharoComment'; lf;
				nextPut: $^; 
				print: (block value: eachClass comment); lf;
				nextPut: $%; lf;
				yourself.

		"for Pharo classes, add the comment"
		] ifFalse: [
			stream2
				nextPutAll: 'run'; lf;
				nextPutAll: '(Smalltalk at: #'; nextPutAll: eachClass name;
				nextPutAll: ') comment: ';
				print: (block value: eachClass comment); lf;
				nextPutAll: '; yourself.'; lf;
				nextPut: $%; lf;
				nextPutAll: 'set compile_env: 2'; lf;
				yourself.
		].

		"now add all the methods"
		(Array with: eachClass class with: eachClass) do: [ :eachBehavior |
			| methodDict organization  |
			methodDict := eachBehavior methodDict.
			organization := eachBehavior organization.
			methodDict keys asSortedCollection do: [ :eachSelector | | category source i |
				category := organization categoryOfElement: eachSelector.
				source := block value: (methodDict at: eachSelector) sourceCode.

				"special handling of primitives"
				i := source findString: '<primitive:'.
				0 < i ifTrue: [ | string inComment inString |
					inComment := false.
					inString := false.
					(string := source copyFrom: 1 to: i - 1) do: [:char | 
						char == $" ifTrue: [inComment := inComment not].
						(inComment not and: [char == $']) ifTrue: [inString := inString not].
					].
					(inComment not and: [inString not]) ifTrue: [
						source := string , '<PharoPrimitive>' , lf asString , 
							'self @env0:error: ''PharoPrimitive''.' , lf asString ,
							'"' , tab asString , 
							((source copyFrom: i to: source size) copyReplaceAll: '"' with: '""') , 
							'"'.
					].
				].

				"don't attempt to compile reserved selectors"
				(reservedSelectors includes: eachSelector) ifTrue: [
					eachSelector == #~~ ifTrue: [
						source := '_gsReservedSelector_tilde_tilde_:' , (source copyFrom: 3 to: source size)
					] ifFalse: [eachSelector == #== ifTrue: [
						source := '_gsReservedSelector_equal_equal_:' , (source copyFrom: 3 to: source size)
					] ifFalse: [
						source := '_gsReservedSelector_' , source.
					]].
					source := source , Character lf asString , Character tab asString , 
					'"The above Pharo code attempts to compile a reserved selector so we place it here for reference"' , 
					Character lf asString.
				].

				"special handling for <compilerOptions> and <metaLinkOptions>"
				source := filter1 value: source.

				"special handling for methods we know won't compile"
				source := filter2 value: eachBehavior value: eachSelector value: source.

				"method category and instance or class side"
				stream2 lf;
					nextPutAll: 'category: '''; nextPutAll: category; nextPut: $'; lf;
					nextPutAll: (eachBehavior isMeta ifTrue: ['classMethod: '] ifFalse: ['method: ']); lf.

				"put out the method"
				(source substrings: (Array with: lf)) do: [:eachLine | 
					| line |
					line := eachLine , ' '.
					(eachLine notEmpty and: [eachLine first == $%]) ifTrue: [stream2 space].
					eachClass == Class ifTrue: [	"can't use instVarNames as method argument"
						line := line copyReplaceAll: ' instVarNames ' with: ' instVarNameList '.
						"line := line copyReplaceAll: 'self instVarNames' with: '(self instVarNames)'.
						line := line copyReplaceAll: 'self class instVarNames' with: '(self class instVarNames)'."
					].
					stream2 nextPutAll: line; lf.
				].
				stream2 nextPut: $%; lf.
				count := count + 1.
			].
		].
		stream2 
			nextPutAll: 'set compile_env: 0'; lf;
			nextPutAll: 'errorCount'; lf;
			nextPutAll: 'output pop'; lf;
			nextPutAll: 'errorCount'; lf;
			close.
	].
].
stream1 
	nextPutAll: 'errorCount'; lf;
	nextPutAll: 'output pop'; lf;
	nextPutAll: 'errorCount'; lf;
	close.
Transcript show: count printString; cr.
] on: Error do: [:ex | 
	Transcript show: ex description; cr.
	ex signalerContext stack do: [:each |
		Transcript show: each; cr.
	].
].
SmalltalkImage current snapshot: false andQuit: true.
